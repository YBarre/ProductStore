// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using ProductStoreClient;
using ProductStoreClient.Models;

namespace ProductStoreClient
{
    public static partial class ProductsExtensions
    {
        /// <param name='operations'>
        /// Reference to the ProductStoreClient.IProducts.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Product DeleteProduct(this IProducts operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProducts)s).DeleteProductAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ProductStoreClient.IProducts.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Product> DeleteProductAsync(this IProducts operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ProductStoreClient.Models.Product> result = await operations.DeleteProductWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ProductStoreClient.IProducts.
        /// </param>
        public static IList<Product> Get(this IProducts operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProducts)s).GetAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ProductStoreClient.IProducts.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Product>> GetAsync(this IProducts operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<ProductStoreClient.Models.Product>> result = await operations.GetWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ProductStoreClient.IProducts.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Product GetProduct(this IProducts operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProducts)s).GetProductAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ProductStoreClient.IProducts.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Product> GetProductAsync(this IProducts operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ProductStoreClient.Models.Product> result = await operations.GetProductWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ProductStoreClient.IProducts.
        /// </param>
        /// <param name='product'>
        /// Required.
        /// </param>
        public static Product PostProduct(this IProducts operations, Product product)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProducts)s).PostProductAsync(product);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ProductStoreClient.IProducts.
        /// </param>
        /// <param name='product'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Product> PostProductAsync(this IProducts operations, Product product, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ProductStoreClient.Models.Product> result = await operations.PostProductWithOperationResponseAsync(product, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ProductStoreClient.IProducts.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='product'>
        /// Required.
        /// </param>
        public static object PutProduct(this IProducts operations, string id, Product product)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProducts)s).PutProductAsync(id, product);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ProductStoreClient.IProducts.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='product'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutProductAsync(this IProducts operations, string id, Product product, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutProductWithOperationResponseAsync(id, product, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
